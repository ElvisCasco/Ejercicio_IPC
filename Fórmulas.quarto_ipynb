{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a8106d36",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Fórmulas\"\n",
    "author: \"Elvis Casco\"\n",
    "crossref:\n",
    "  fig-title: Gráfico     # (default is \"Figure\")\n",
    "  tbl-title: Tabla     # (default is \"Table\")\n",
    "  fig-prefix: Gráfico   # (default is \"Figure\")\n",
    "  tbl-prefix: Tabla    # (default is \"Table\")\n",
    "format:\n",
    "  html:\n",
    "    toc: true\n",
    "    code-fold: true\n",
    "  # pdf: \n",
    "  #   documentclass: report\n",
    "  #   classoption: landscape\n",
    "  #   geometry:\n",
    "  #     - top=5mm\n",
    "  #     - left=10mm\n",
    "  #     - right=10mm\n",
    "    echo: false\n",
    "    warnings: false\n",
    "    keep-ipynb: true\n",
    "jupyter: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a8b11af3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %pip install --upgrade polars\n",
    "\n",
    "# import duckdb\n",
    "# import glob\n",
    "# import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "# import os\n",
    "import polars as pl\n",
    "# import pandas as pd\n",
    "# import pyarrow\n",
    "# import reader\n",
    "# import time\n",
    "\n",
    "from great_tables import GT\n",
    "# from math import ceil\n",
    "# from multiprocessing import Pool\n",
    "# from typing import Dict, Any\n",
    "# from typing import Optional\n",
    "\n",
    "wd = \"C:/Directorio_Trabajo/2024/IPC_Calc/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5d48a75a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DataFrame de ponderaciones por agrupación y región desde hoja de Excel\n",
    "def get_ponds_from_xlsx():\n",
    "    df = pl.read_excel(\n",
    "        source = wd + \"Categorias.xlsx\",\n",
    "        sheet_name = \"Regiones\",\n",
    "        infer_schema_length=None,\n",
    "        schema_overrides={\n",
    "            \"División\": pl.String,\n",
    "            \"Grupo\": pl.String,\n",
    "            \"Clase\": pl.String,\n",
    "            \"SubClase\": pl.String,\n",
    "            \"Categoría\": pl.String,\n",
    "            \"Producto\": pl.String,\n",
    "            },\n",
    "    )[:,1:]\n",
    "    df = df.with_columns(\n",
    "        pl.col(\"Código\").str.slice(0, 2).alias(\"División\"),\n",
    "        pl.col(\"Código\").str.slice(0, 3).alias(\"Grupo\"),\n",
    "        pl.col(\"Código\").str.slice(0, 4).alias(\"Clase\"),\n",
    "        pl.col(\"Código\").str.slice(0, 5).alias(\"SubClase\"),\n",
    "        pl.col(\"Código\").str.slice(0, 6).alias(\"Categoría\"),\n",
    "        pl.col(\"Código\").str.slice(0, 8).alias(\"Producto\"),\n",
    "        )\n",
    "    return df\n",
    "\n",
    "# DataFrame de índices desde hoja de Excel\n",
    "def get_df_from_xlsx(region):\n",
    "    df = pl.read_excel(\n",
    "        source = wd + \"Ejercicio calculo IPC - Investigación.xlsx\",\n",
    "        sheet_name = region\n",
    "    )[:,2:]\n",
    "    return df\n",
    "\n",
    "# Solo los datos que contienen Precio, Unidad de Medida o Contenido; depura establecimientos\n",
    "def get_valid_columns_in_df(df):\n",
    "    nombres_t = df.columns\n",
    "    df[1,0]=\"Precio\"\n",
    "    df[1,1]=\"Unidad de Medida\"\n",
    "    df[1,2]=\"Contenido\"\n",
    "\n",
    "    check_list=[\"Precio\",\"Unidad de Medida\",\"Contenido\"] \n",
    "    row_values = df.row(1)\n",
    "    conditions_met = [value in check_list for value in row_values]\n",
    "    df = df[conditions_met]\n",
    "    return df\n",
    "\n",
    "# Repetir los valores de los establecimientos en la primera fila\n",
    "def repeat_names_in_row(row):\n",
    "    row = list(row)\n",
    "    for i in range(1, len(row)):\n",
    "        if i % 3 != 0:\n",
    "            row[i] = row[i - (i % 3)]\n",
    "    return row\n",
    "\n",
    "def replace_names_in_df(df,row_index,modified_row):\n",
    "    row_values = df.row(row_index)\n",
    "    df = df.with_columns([\n",
    "        pl.when(\n",
    "            pl.arange(0, df.height) == row_index\n",
    "            ).then(\n",
    "                pl.lit(modified_row[i])\n",
    "            ).otherwise(pl.col(col)\n",
    "            ).alias(col)\n",
    "        for i, col in enumerate(df.columns)\n",
    "    ])\n",
    "    return df\n",
    "\n",
    "def modify_df_names(df):\n",
    "    modified_row = repeat_names_in_row(df.row(0))\n",
    "    df = replace_names_in_df(df,0,modified_row)\n",
    "    return df\n",
    "\n",
    "def replace_unnamed(row):\n",
    "    for i in range(1, len(row)):\n",
    "        if r\"UNNAMED\" in row[i]:\n",
    "            row[i] = row[i - 1]\n",
    "    return row\n",
    "\n",
    "def modify_df_establecimientos(df):\n",
    "    modified_row = df.columns\n",
    "    df = replace_names_in_df(df,2,modified_row)\n",
    "    row_index = 2\n",
    "    row_values = df.row(row_index)\n",
    "    modified_row = replace_unnamed(list(row_values))\n",
    "    df = replace_names_in_df(df,2,modified_row)\n",
    "    return df\n",
    "\n",
    "def obtener_dataframe(region):\n",
    "    df = get_df_from_xlsx(region)\n",
    "    df = get_valid_columns_in_df(df)\n",
    "    df = modify_df_names(df)\n",
    "    df = modify_df_establecimientos(df)\n",
    "    df[0,1] = \".\"\n",
    "    a_list = [\"Unidad de Medida\",\"Codigo\",'.']\n",
    "    df = df.filter(\n",
    "        pl.col('Codigo').str.contains_any(a_list))\n",
    "    indices_to_select = [1] + list(range(3, len(df.columns)))\n",
    "    columns_to_select = [df.columns[i] for i in indices_to_select]\n",
    "    df = df.select(columns_to_select)\n",
    "    df = df.transpose(include_header=False)\n",
    "    new_column_names_row = df.row(0)\n",
    "    new_column_names = list(new_column_names_row)\n",
    "    rename_dict = {\n",
    "        old: new for old, new in zip(df.columns, new_column_names)}\n",
    "    df = df.rename(rename_dict)\n",
    "    df = df[1:,:]\n",
    "    return df\n",
    "\n",
    "def obtener_precio_t_1(region):\n",
    "    df = obtener_dataframe(region)\n",
    "    df_Precio_t_1 = df.filter(\n",
    "        pl.col('Codigo').str.contains('t-1'))\n",
    "    df_Precio_t_1 = df_Precio_t_1.filter(\n",
    "        pl.col('Unidad de Medida').str.contains('Precio'))\n",
    "    df_Precio_t_1.write_excel(\n",
    "        workbook = wd + region + \"/\" + region + \"_Precio_t_1.xlsx\")\n",
    "    word = ' Precio'\n",
    "    pattern = f'{word}.*'\n",
    "    df_Precio_t_1 = df_Precio_t_1.with_columns(\n",
    "        pl.col('Codigo').str.replace(pattern,\"\"))\n",
    "    word = ' Precio'\n",
    "    pattern = f'{word}.*'\n",
    "    df_Precio_t_1 = df_Precio_t_1.with_columns(\n",
    "        pl.col('Codigo').str.replace(pattern,\"\"))\n",
    "    return df_Precio_t_1\n",
    "\n",
    "def obtener_contenido_t_1(region):\n",
    "    df = obtener_dataframe(region)\n",
    "    df_Contenido_t_1 = df.filter(\n",
    "        pl.col('Codigo').str.contains('t-1'))\n",
    "    df_Contenido_t_1 = df_Contenido_t_1.filter(\n",
    "        pl.col('Unidad de Medida').str.contains('Contenido'))\n",
    "    df_Contenido_t_1.write_excel(\n",
    "        workbook = wd + region + \"/\" + region + \"_Contenido_t_1.xlsx\")\n",
    "    word = ' Precio'\n",
    "    pattern = f'{word}.*'\n",
    "    df_Contenido_t_1 = df_Contenido_t_1.with_columns(\n",
    "        pl.col('Codigo').str.replace(pattern,\"\"))\n",
    "    word = ' Precio'\n",
    "    pattern = f'{word}.*'\n",
    "    df_Contenido_t_1 = df_Contenido_t_1.with_columns(\n",
    "        pl.col('Codigo').str.replace(pattern,\"\"))\n",
    "    return df_Contenido_t_1\n",
    "\n",
    "def obtener_precio_t(region):\n",
    "    df = obtener_dataframe(region)\n",
    "    df_Precio_t = df.filter(\n",
    "        ~pl.col('Codigo').str.contains('t-1'))\n",
    "    df_Precio_t = df_Precio_t.filter(\n",
    "        pl.col('Unidad de Medida').str.contains('Precio'))\n",
    "    df_Precio_t.write_excel(workbook = wd + region + \"/\" + region + \"_Precio_t.xlsx\")\n",
    "    word = ' Precio'\n",
    "    pattern = f'{word}.*'\n",
    "    df_Precio_t = df_Precio_t.with_columns(\n",
    "        pl.col('Codigo').str.replace(pattern,\"\"))\n",
    "    return df_Precio_t\n",
    "\n",
    "def obtener_contenido_t(region):\n",
    "    df = obtener_dataframe(region)\n",
    "    df_Contenido_t = df.filter(\n",
    "        ~pl.col('Codigo').str.contains('t-1'))\n",
    "    df_Contenido_t = df_Contenido_t.filter(\n",
    "        pl.col('Unidad de Medida').str.contains('Contenido'))\n",
    "    df_Contenido_t.write_excel(workbook = wd + region + \"/\" + region + \"_Contenido_t.xlsx\")\n",
    "    word = ' Precio'\n",
    "    pattern = f'{word}.*'\n",
    "    df_Contenido_t = df_Contenido_t.with_columns(\n",
    "        pl.col('Codigo').str.replace(pattern,\"\"))\n",
    "    return df_Contenido_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "80f985e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def obtener_indices(wd,region):\n",
    "    # Valores en t\n",
    "    p_t = obtener_precio_t(region)\n",
    "    my_columns = p_t.columns\n",
    "    cols_to_process = my_columns[3:p_t.shape[1]]\n",
    "    p_t[cols_to_process] = p_t[cols_to_process].cast(pl.Float64, strict=False)\n",
    "    c_t = obtener_contenido_t(region)\n",
    "    my_columns = c_t.columns\n",
    "    cols_to_process = my_columns[3:c_t.shape[1]]\n",
    "    c_t[cols_to_process] = c_t[cols_to_process].cast(pl.Float64, strict=False)\n",
    "\n",
    "    # Valores en t-1\n",
    "    p_t_1 = obtener_precio_t_1(region)\n",
    "    my_columns = p_t_1.columns\n",
    "    cols_to_process = my_columns[3:p_t_1.shape[1]]\n",
    "    p_t_1[cols_to_process] = p_t_1[cols_to_process].cast(pl.Float64, strict=False)\n",
    "    c_t_1 = obtener_contenido_t_1(region)\n",
    "    my_columns = c_t_1.columns\n",
    "    cols_to_process = my_columns[3:c_t_1.shape[1]]\n",
    "    c_t_1[cols_to_process] = c_t_1[cols_to_process].cast(pl.Float64, strict=False)\n",
    "\n",
    "    # Índice de Precios por Establecimiento y Variedad\n",
    "    i_t = p_t.clone()\n",
    "    i_t[my_columns[3:i_t.shape[1]]] = (p_t[my_columns[3:c_t.shape[1]]] / c_t[my_columns[3:c_t.shape[1]]]) / (p_t_1[my_columns[3:c_t_1.shape[1]]] / c_t_1[my_columns[3:c_t_1.shape[1]]])\n",
    "    i_t = i_t.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    i_t.write_excel(\n",
    "        workbook = wd + region + \"/\" + region + \"_Establecimiento.xlsx\")\n",
    "\n",
    "    # Índice de Precios por Variedad: Media Geométrica\n",
    "    res_variedad = pl.DataFrame([\n",
    "        pl.Series(\"Variedad\", my_columns[3:i_t.shape[1]], dtype=pl.String)])\n",
    "    res_variedad = res_variedad.with_columns(pl.col(\"Variedad\").str.slice(0, 8).alias(\"Producto\"))\n",
    "    res_variedad = res_variedad.with_columns(\n",
    "        Indice = 0.0)\n",
    "    for row in range(res_variedad.shape[0]):\n",
    "        res_variedad[row,2] = geometric_mean(\n",
    "            i_t[res_variedad[\"Variedad\"][row]].drop_nans() * 100)\n",
    "    res_variedad = res_variedad.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    res_variedad.write_excel(\n",
    "        workbook = wd + region + \"/\" + region + \"_Variedad.xlsx\")\n",
    "\n",
    "    # Índice de Precios por Producto: Media Geométrica\n",
    "    res_producto = (\n",
    "        res_variedad.group_by(\"Producto\", maintain_order=True)\n",
    "        .agg(\n",
    "            pl.map_groups(\n",
    "                exprs=[\"Indice\"],\n",
    "                function=geometric_mean)\n",
    "        ))\n",
    "    res_producto = res_producto.join(\n",
    "        ponderaciones_producto_region, \n",
    "        on=\"Producto\")\n",
    "    res_producto = res_producto.with_columns(\n",
    "        (pl.col(\"Indice\") * pl.col(region) / 100).alias(\"Indice_Pond\"),)\n",
    "    res_producto = res_producto.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    res_producto[\n",
    "        \"Producto\",\"Indice\",region,\"Indice_Pond\"].write_excel(\n",
    "        workbook = wd + region + \"/\" + region + \"_Producto.xlsx\")\n",
    "\n",
    "    ## Índice de Precios por Agrupaciones: Media Ponderada\n",
    "    grupo = \"Categoría\"\n",
    "    res_categoria = weighted_index_group_region(res_producto,grupo)\n",
    "    res_categoria = res_categoria.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    res_categoria.write_excel(\n",
    "        workbook = wd + region +\"/\" + region + \"_\" + grupo + \".xlsx\")\n",
    "    grupo = \"SubClase\"\n",
    "    res_subclase = weighted_index_group_region(res_producto,grupo)\n",
    "    res_subclase = res_subclase.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    res_subclase.write_excel(\n",
    "        workbook = wd + region +\"/\" + region + \"_\" + grupo + \".xlsx\")\n",
    "    grupo = \"Clase\"\n",
    "    res_subclase = weighted_index_group_region(res_producto,grupo)\n",
    "    res_subclase = res_subclase.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    res_subclase.write_excel(\n",
    "        workbook = wd + region +\"/\" + region + \"_\" + grupo + \".xlsx\")\n",
    "    grupo = \"Grupo\"\n",
    "    res_grupo = weighted_index_group_region(res_producto,grupo)\n",
    "    res_grupo = res_grupo.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    res_grupo.write_excel(\n",
    "        workbook = wd + region +\"/\" + region + \"_\" + grupo + \".xlsx\")\n",
    "    grupo = \"División\"\n",
    "    res_division = weighted_index_group_region(res_producto,grupo)\n",
    "    res_division = res_division.with_columns(pl.lit(region).alias(\"Región\"))\n",
    "    res_division.write_excel(\n",
    "        workbook = wd + region +\"/\" + region + \"_\" + grupo + \".xlsx\")\n",
    "\n",
    "    # Resultados en DataFrames\n",
    "    return p_t, c_t, p_t_1, c_t_1, i_t, res_variedad, res_producto, res_categoria, res_subclase, res_grupo, res_division\n",
    "\n",
    "# Function to calculate geometric mean\n",
    "def geometric_mean(series):\n",
    "    return np.exp(np.log(series).mean())\n",
    "\n",
    "def weighted_index_group_region(df,grupo):\n",
    "    result = df.group_by(grupo).agg(\n",
    "        [\n",
    "            (pl.col(\"Indice\") * pl.col(region) / 100).sum(\n",
    "            ).alias(\"weighted_sum\"),\n",
    "            pl.col(region).sum(\n",
    "            ).alias(\"Peso_\" + grupo)\n",
    "        ]).with_columns([\n",
    "            (pl.col(\"weighted_sum\") / pl.col(\"Peso_\" + grupo) * 100\n",
    "            ).alias(\"Índice_\" + grupo)\n",
    "        ]).select([grupo, \"Peso_\" + grupo, \"Índice_\" + grupo\n",
    "        ]).sort(grupo)\n",
    "    result = result.with_columns(\n",
    "        (pl.col(\"Índice_\" + grupo) * pl.col(\"Peso_\" + grupo) / 100).alias(\"Indice_Pond\"),\n",
    "    )\n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad12edbd",
   "metadata": {},
   "source": [
    "# IPC por Elementos\n",
    "\n",
    "Esta explicación se toma del Manual, para explicar a partir de los elementos mas pequeños: variedades. En dicho manual, a estos se les nombra como **agregados elementales**.\n",
    "\n",
    "## Construcción de agregados elementales\n",
    "\n",
    "Los agregados elementales son grupos de bienes y servicios relativamente homogéneos, que pueden abarcar todo el país o solo regiones individuales. Asimismo, pueden establecerse distintos agregados elementales para distintos tipos de puntos de venta. L\n",
    "\n",
    "Para su escogencia se tienen en cuenta los siguientes elementos:\n",
    "\n",
    "- Los agregados elementales deberían componerse de grupos de bienes o servicios tan parecidos entre sí como sea posible y, preferentemente, homogéneos.\n",
    "- Deberían estar compuestos de artículos de los cuales se esperan variaciones de precios parecidas, a efectos de minimizar la dispersión de las variaciones de precios dentro del agregado. \n",
    "- Los agregados elementales deberían ser apropiados para servir como estratos para propósito de muestreo en función del régimen de muestreo que se establezca para la recopilación de datos.\n",
    "\n",
    "Utilizando una clasificación de los gastos del consumidor como la Clasificación del Consumo Individual por Finalidades (CCIF), todo el conjunto de bienes y servicios de consumo que abarca el IPC nivel general puede dividirse en **grupos**, por ejemplo \"comestibles y bebidas no alcohólicas\". Cada grupo se divide a su vez en **clases**, por ejemplo, \"comestibles\". A los fines del IPC, cada clase puede dividirse a su vez en **subclases** más homogéneas, como \"arroz\". Las subclases equivalen a los capítulos del Programa de Comparación Internacional, que calcula las paridades de poder adquisitivo (PPA) entre países. Finalmente, la subclase puede descomponerse aún más para obtener agregados elementales por regiones o puntos de venta.\n",
    "\n",
    "Para Honduras, a partir del código CCIF, se tienen productos por CCIF agrupados por:\n",
    "\n",
    "- Producto: CCIF a 8 dígitos;\n",
    "- Categoría: CCIF a 6 dígitos;\n",
    "- Subclase: CCIF a 5 dígitos;\n",
    "- Clase: CCIF a 4 dígitos;\n",
    "- Grupo: CCIF a 3 dígitos; y\n",
    "- División: CCIF a 2 dígitos.\n",
    "\n",
    "Las ponderaciones por producto son distintas por cada región:\n",
    "\n",
    "- MDC = Metropolitana Distrito Central\n",
    "- RUC = Resto Urbano Central\n",
    "- MSPS =  Metropolitana San Pedro Sula\n",
    "- RUN = Resto Urbano Norte\n",
    "- ULA = Urbana Litoral Atlántico\n",
    "- UOri = Urbana Oriental\n",
    "- UOcc = Urbana Occidental\n",
    "- US = Urbana Sur\n",
    "\n",
    "En la tabla se muestran los datos de los primeros 5 productos con sus respectivas ponderaciones por región.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be25a45f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"sxshslzcjz\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n",
       "<style>\n",
       "#sxshslzcjz table {\n",
       "          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n",
       "          -webkit-font-smoothing: antialiased;\n",
       "          -moz-osx-font-smoothing: grayscale;\n",
       "        }\n",
       "\n",
       "#sxshslzcjz thead, tbody, tfoot, tr, td, th { border-style: none; }\n",
       " tr { background-color: transparent; }\n",
       "#sxshslzcjz p { margin: 0; padding: 0; }\n",
       " #sxshslzcjz .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n",
       " #sxshslzcjz .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n",
       " #sxshslzcjz .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n",
       " #sxshslzcjz .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n",
       " #sxshslzcjz .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n",
       " #sxshslzcjz .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n",
       " #sxshslzcjz .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n",
       " #sxshslzcjz .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n",
       " #sxshslzcjz .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n",
       " #sxshslzcjz .gt_column_spanner_outer:first-child { padding-left: 0; }\n",
       " #sxshslzcjz .gt_column_spanner_outer:last-child { padding-right: 0; }\n",
       " #sxshslzcjz .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n",
       " #sxshslzcjz .gt_spanner_row { border-bottom-style: hidden; }\n",
       " #sxshslzcjz .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n",
       " #sxshslzcjz .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n",
       " #sxshslzcjz .gt_from_md> :first-child { margin-top: 0; }\n",
       " #sxshslzcjz .gt_from_md> :last-child { margin-bottom: 0; }\n",
       " #sxshslzcjz .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n",
       " #sxshslzcjz .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n",
       " #sxshslzcjz .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n",
       " #sxshslzcjz .gt_row_group_first td { border-top-width: 2px; }\n",
       " #sxshslzcjz .gt_row_group_first th { border-top-width: 2px; }\n",
       " #sxshslzcjz .gt_striped { background-color: rgba(128,128,128,0.05); }\n",
       " #sxshslzcjz .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n",
       " #sxshslzcjz .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n",
       " #sxshslzcjz .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n",
       " #sxshslzcjz .gt_left { text-align: left; }\n",
       " #sxshslzcjz .gt_center { text-align: center; }\n",
       " #sxshslzcjz .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n",
       " #sxshslzcjz .gt_font_normal { font-weight: normal; }\n",
       " #sxshslzcjz .gt_font_bold { font-weight: bold; }\n",
       " #sxshslzcjz .gt_font_italic { font-style: italic; }\n",
       " #sxshslzcjz .gt_super { font-size: 65%; }\n",
       " #sxshslzcjz .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n",
       " #sxshslzcjz .gt_asterisk { font-size: 100%; vertical-align: 0; }\n",
       " \n",
       "</style>\n",
       "<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n",
       "<thead>\n",
       "\n",
       "<tr class=\"gt_col_headings\">\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Código\">Código</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"CCIF\">CCIF</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"División\">División</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Grupo\">Grupo</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Clase\">Clase</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"SubClase\">SubClase</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Categoría\">Categoría</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Producto\">Producto</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"MDC\">MDC</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"RUC\">RUC</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"MSPS\">MSPS</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"RUN\">RUN</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"ULA\">ULA</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"UOri\">UOri</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"UOcc\">UOcc</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"US\">US</th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody class=\"gt_table_body\">\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">01111201</td>\n",
       "    <td class=\"gt_row gt_left\">Arroz clasificado</td>\n",
       "    <td class=\"gt_row gt_left\">01</td>\n",
       "    <td class=\"gt_row gt_left\">011</td>\n",
       "    <td class=\"gt_row gt_left\">0111</td>\n",
       "    <td class=\"gt_row gt_left\">01111</td>\n",
       "    <td class=\"gt_row gt_left\">011112</td>\n",
       "    <td class=\"gt_row gt_left\">01111201</td>\n",
       "    <td class=\"gt_row gt_right\">0.5700</td>\n",
       "    <td class=\"gt_row gt_right\">1.4588</td>\n",
       "    <td class=\"gt_row gt_right\">0.3509</td>\n",
       "    <td class=\"gt_row gt_right\">0.4085</td>\n",
       "    <td class=\"gt_row gt_right\">0.5434</td>\n",
       "    <td class=\"gt_row gt_right\">0.4632</td>\n",
       "    <td class=\"gt_row gt_right\">0.3412</td>\n",
       "    <td class=\"gt_row gt_right\">0.4629</td>\n",
       "  </tr>\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">01111601</td>\n",
       "    <td class=\"gt_row gt_left\">Maíz en grano o desgranado</td>\n",
       "    <td class=\"gt_row gt_left\">01</td>\n",
       "    <td class=\"gt_row gt_left\">011</td>\n",
       "    <td class=\"gt_row gt_left\">0111</td>\n",
       "    <td class=\"gt_row gt_left\">01111</td>\n",
       "    <td class=\"gt_row gt_left\">011116</td>\n",
       "    <td class=\"gt_row gt_left\">01111601</td>\n",
       "    <td class=\"gt_row gt_right\">0.4200</td>\n",
       "    <td class=\"gt_row gt_right\">0.8953</td>\n",
       "    <td class=\"gt_row gt_right\">1.3982</td>\n",
       "    <td class=\"gt_row gt_right\">0.5928</td>\n",
       "    <td class=\"gt_row gt_right\">0.9992</td>\n",
       "    <td class=\"gt_row gt_right\">0.8363</td>\n",
       "    <td class=\"gt_row gt_right\">0.8863</td>\n",
       "    <td class=\"gt_row gt_right\">1.4378</td>\n",
       "  </tr>\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">01112101</td>\n",
       "    <td class=\"gt_row gt_left\">Harina de trigo</td>\n",
       "    <td class=\"gt_row gt_left\">01</td>\n",
       "    <td class=\"gt_row gt_left\">011</td>\n",
       "    <td class=\"gt_row gt_left\">0111</td>\n",
       "    <td class=\"gt_row gt_left\">01112</td>\n",
       "    <td class=\"gt_row gt_left\">011121</td>\n",
       "    <td class=\"gt_row gt_left\">01112101</td>\n",
       "    <td class=\"gt_row gt_right\">0.0400</td>\n",
       "    <td class=\"gt_row gt_right\">0.3975</td>\n",
       "    <td class=\"gt_row gt_right\">0.3677</td>\n",
       "    <td class=\"gt_row gt_right\">0.2095</td>\n",
       "    <td class=\"gt_row gt_right\">0.3380</td>\n",
       "    <td class=\"gt_row gt_right\">0.5078</td>\n",
       "    <td class=\"gt_row gt_right\">0.3144</td>\n",
       "    <td class=\"gt_row gt_right\">0.7109</td>\n",
       "  </tr>\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">01112601</td>\n",
       "    <td class=\"gt_row gt_left\">Harina de maíz</td>\n",
       "    <td class=\"gt_row gt_left\">01</td>\n",
       "    <td class=\"gt_row gt_left\">011</td>\n",
       "    <td class=\"gt_row gt_left\">0111</td>\n",
       "    <td class=\"gt_row gt_left\">01112</td>\n",
       "    <td class=\"gt_row gt_left\">011126</td>\n",
       "    <td class=\"gt_row gt_left\">01112601</td>\n",
       "    <td class=\"gt_row gt_right\">0.0500</td>\n",
       "    <td class=\"gt_row gt_right\">0.9162</td>\n",
       "    <td class=\"gt_row gt_right\">1.6122</td>\n",
       "    <td class=\"gt_row gt_right\">0.7486</td>\n",
       "    <td class=\"gt_row gt_right\">1.5863</td>\n",
       "    <td class=\"gt_row gt_right\">1.1931</td>\n",
       "    <td class=\"gt_row gt_right\">1.7767</td>\n",
       "    <td class=\"gt_row gt_right\">0.9332</td>\n",
       "  </tr>\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">01113101</td>\n",
       "    <td class=\"gt_row gt_left\">Bollito de yema pan dulce</td>\n",
       "    <td class=\"gt_row gt_left\">01</td>\n",
       "    <td class=\"gt_row gt_left\">011</td>\n",
       "    <td class=\"gt_row gt_left\">0111</td>\n",
       "    <td class=\"gt_row gt_left\">01113</td>\n",
       "    <td class=\"gt_row gt_left\">011131</td>\n",
       "    <td class=\"gt_row gt_left\">01113101</td>\n",
       "    <td class=\"gt_row gt_right\">0.0100</td>\n",
       "    <td class=\"gt_row gt_right\">0.0834</td>\n",
       "    <td class=\"gt_row gt_right\">0.1171</td>\n",
       "    <td class=\"gt_row gt_right\">0.0745</td>\n",
       "    <td class=\"gt_row gt_right\">0.1325</td>\n",
       "    <td class=\"gt_row gt_right\">0.0712</td>\n",
       "    <td class=\"gt_row gt_right\">0.0870</td>\n",
       "    <td class=\"gt_row gt_right\">0.0534</td>\n",
       "  </tr>\n",
       "</tbody>\n",
       "\n",
       "\n",
       "</table>\n",
       "\n",
       "</div>\n",
       "        "
      ],
      "text/plain": [
       "GT(_tbl_data=shape: (5, 16)\n",
       "┌──────────┬────────────────────┬──────────┬───────┬───┬──────────┬──────────┬──────────┬──────────┐\n",
       "│ Código   ┆ CCIF               ┆ División ┆ Grupo ┆ … ┆ ULA      ┆ UOri     ┆ UOcc     ┆ US       │\n",
       "│ ---      ┆ ---                ┆ ---      ┆ ---   ┆   ┆ ---      ┆ ---      ┆ ---      ┆ ---      │\n",
       "│ str      ┆ str                ┆ str      ┆ str   ┆   ┆ f64      ┆ f64      ┆ f64      ┆ f64      │\n",
       "╞══════════╪════════════════════╪══════════╪═══════╪═══╪══════════╪══════════╪══════════╪══════════╡\n",
       "│ 01111201 ┆ Arroz clasificado  ┆ 01       ┆ 011   ┆ … ┆ 0.543434 ┆ 0.463219 ┆ 0.341214 ┆ 0.462949 │\n",
       "│ 01111601 ┆ Maíz en grano o    ┆ 01       ┆ 011   ┆ … ┆ 0.999183 ┆ 0.836265 ┆ 0.886344 ┆ 1.437759 │\n",
       "│          ┆ desgranado         ┆          ┆       ┆   ┆          ┆          ┆          ┆          │\n",
       "│ 01112101 ┆ Harina de trigo    ┆ 01       ┆ 011   ┆ … ┆ 0.337976 ┆ 0.507841 ┆ 0.314443 ┆ 0.710946 │\n",
       "│ 01112601 ┆ Harina de maíz     ┆ 01       ┆ 011   ┆ … ┆ 1.586349 ┆ 1.193139 ┆ 1.776669 ┆ 0.933226 │\n",
       "│ 01113101 ┆ Bollito de yema    ┆ 01       ┆ 011   ┆ … ┆ 0.132509 ┆ 0.071191 ┆ 0.087009 ┆ 0.053359 │\n",
       "│          ┆ pan dulce          ┆          ┆       ┆   ┆          ┆          ┆          ┆          │\n",
       "└──────────┴────────────────────┴──────────┴───────┴───┴──────────┴──────────┴──────────┴──────────┘, _body=<great_tables._gt_data.Body object at 0x0000013898BBF0E0>, _boxhead=Boxhead([ColInfo(var='Código', type=<ColInfoTypeEnum.default: 1>, column_label='Código', column_align='left', column_width=None), ColInfo(var='CCIF', type=<ColInfoTypeEnum.default: 1>, column_label='CCIF', column_align='left', column_width=None), ColInfo(var='División', type=<ColInfoTypeEnum.default: 1>, column_label='División', column_align='left', column_width=None), ColInfo(var='Grupo', type=<ColInfoTypeEnum.default: 1>, column_label='Grupo', column_align='left', column_width=None), ColInfo(var='Clase', type=<ColInfoTypeEnum.default: 1>, column_label='Clase', column_align='left', column_width=None), ColInfo(var='SubClase', type=<ColInfoTypeEnum.default: 1>, column_label='SubClase', column_align='left', column_width=None), ColInfo(var='Categoría', type=<ColInfoTypeEnum.default: 1>, column_label='Categoría', column_align='left', column_width=None), ColInfo(var='Producto', type=<ColInfoTypeEnum.default: 1>, column_label='Producto', column_align='left', column_width=None), ColInfo(var='MDC', type=<ColInfoTypeEnum.default: 1>, column_label='MDC', column_align='right', column_width=None), ColInfo(var='RUC', type=<ColInfoTypeEnum.default: 1>, column_label='RUC', column_align='right', column_width=None), ColInfo(var='MSPS', type=<ColInfoTypeEnum.default: 1>, column_label='MSPS', column_align='right', column_width=None), ColInfo(var='RUN', type=<ColInfoTypeEnum.default: 1>, column_label='RUN', column_align='right', column_width=None), ColInfo(var='ULA', type=<ColInfoTypeEnum.default: 1>, column_label='ULA', column_align='right', column_width=None), ColInfo(var='UOri', type=<ColInfoTypeEnum.default: 1>, column_label='UOri', column_align='right', column_width=None), ColInfo(var='UOcc', type=<ColInfoTypeEnum.default: 1>, column_label='UOcc', column_align='right', column_width=None), ColInfo(var='US', type=<ColInfoTypeEnum.default: 1>, column_label='US', column_align='right', column_width=None)]), _stub=<great_tables._gt_data.Stub object at 0x0000013898BBEE40>, _spanners=Spanners([]), _heading=Heading(title=None, subtitle=None, preheader=None), _stubhead=None, _source_notes=[], _footnotes=[], _styles=[], _locale=<great_tables._gt_data.Locale object at 0x0000013898BBF4D0>, _formats=[<great_tables._gt_data.FormatInfo object at 0x000001389794A3C0>], _substitutions=[], _options=Options(table_id=OptionsInfo(scss=False, category='table', type='value', value=None), table_caption=OptionsInfo(scss=False, category='table', type='value', value=None), table_width=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_layout=OptionsInfo(scss=True, category='table', type='value', value='fixed'), table_margin_left=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_margin_right=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_background_color=OptionsInfo(scss=True, category='table', type='value', value='#FFFFFF'), table_additional_css=OptionsInfo(scss=False, category='table', type='values', value=[]), table_font_names=OptionsInfo(scss=False, category='table', type='values', value=['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Helvetica Neue', 'Fira Sans', 'Droid Sans', 'Arial', 'sans-serif']), table_font_size=OptionsInfo(scss=True, category='table', type='px', value='16px'), table_font_weight=OptionsInfo(scss=True, category='table', type='value', value='normal'), table_font_style=OptionsInfo(scss=True, category='table', type='value', value='normal'), table_font_color=OptionsInfo(scss=True, category='table', type='value', value='#333333'), table_font_color_light=OptionsInfo(scss=True, category='table', type='value', value='#FFFFFF'), table_border_top_include=OptionsInfo(scss=False, category='table', type='boolean', value=True), table_border_top_style=OptionsInfo(scss=True, category='table', type='value', value='solid'), table_border_top_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_top_color=OptionsInfo(scss=True, category='table', type='value', value='#A8A8A8'), table_border_right_style=OptionsInfo(scss=True, category='table', type='value', value='none'), table_border_right_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_right_color=OptionsInfo(scss=True, category='table', type='value', value='#D3D3D3'), table_border_bottom_include=OptionsInfo(scss=False, category='table', type='boolean', value=True), table_border_bottom_style=OptionsInfo(scss=True, category='table', type='value', value='solid'), table_border_bottom_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_bottom_color=OptionsInfo(scss=True, category='table', type='value', value='#A8A8A8'), table_border_left_style=OptionsInfo(scss=True, category='table', type='value', value='none'), table_border_left_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_left_color=OptionsInfo(scss=True, category='table', type='value', value='#D3D3D3'), heading_background_color=OptionsInfo(scss=True, category='heading', type='value', value=None), heading_align=OptionsInfo(scss=True, category='heading', type='value', value='center'), heading_title_font_size=OptionsInfo(scss=True, category='heading', type='px', value='125%'), heading_title_font_weight=OptionsInfo(scss=True, category='heading', type='value', value='initial'), heading_subtitle_font_size=OptionsInfo(scss=True, category='heading', type='px', value='85%'), heading_subtitle_font_weight=OptionsInfo(scss=True, category='heading', type='value', value='initial'), heading_padding=OptionsInfo(scss=True, category='heading', type='px', value='4px'), heading_padding_horizontal=OptionsInfo(scss=True, category='heading', type='px', value='5px'), heading_border_bottom_style=OptionsInfo(scss=True, category='heading', type='value', value='solid'), heading_border_bottom_width=OptionsInfo(scss=True, category='heading', type='px', value='2px'), heading_border_bottom_color=OptionsInfo(scss=True, category='heading', type='value', value='#D3D3D3'), heading_border_lr_style=OptionsInfo(scss=True, category='heading', type='value', value='none'), heading_border_lr_width=OptionsInfo(scss=True, category='heading', type='px', value='1px'), heading_border_lr_color=OptionsInfo(scss=True, category='heading', type='value', value='#D3D3D3'), column_labels_background_color=OptionsInfo(scss=True, category='column_labels', type='value', value=None), column_labels_font_size=OptionsInfo(scss=True, category='column_labels', type='px', value='100%'), column_labels_font_weight=OptionsInfo(scss=True, category='column_labels', type='value', value='normal'), column_labels_text_transform=OptionsInfo(scss=True, category='column_labels', type='value', value='inherit'), column_labels_padding=OptionsInfo(scss=True, category='column_labels', type='px', value='5px'), column_labels_padding_horizontal=OptionsInfo(scss=True, category='column_labels', type='px', value='5px'), column_labels_vlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='none'), column_labels_vlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), column_labels_vlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), column_labels_border_top_style=OptionsInfo(scss=True, category='column_labels', type='value', value='solid'), column_labels_border_top_width=OptionsInfo(scss=True, category='column_labels', type='px', value='2px'), column_labels_border_top_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_border_bottom_style=OptionsInfo(scss=True, category='column_labels', type='value', value='solid'), column_labels_border_bottom_width=OptionsInfo(scss=True, category='column_labels', type='px', value='2px'), column_labels_border_bottom_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_border_lr_style=OptionsInfo(scss=True, category='column_labels', type='value', value='none'), column_labels_border_lr_width=OptionsInfo(scss=True, category='column_labels', type='px', value='1px'), column_labels_border_lr_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_hidden=OptionsInfo(scss=False, category='column_labels', type='boolean', value=False), row_group_background_color=OptionsInfo(scss=True, category='row_group', type='value', value=None), row_group_font_size=OptionsInfo(scss=True, category='row_group', type='px', value='100%'), row_group_font_weight=OptionsInfo(scss=True, category='row_group', type='value', value='initial'), row_group_text_transform=OptionsInfo(scss=True, category='row_group', type='value', value='inherit'), row_group_padding=OptionsInfo(scss=True, category='row_group', type='px', value='8px'), row_group_padding_horizontal=OptionsInfo(scss=True, category='row_group', type='px', value='5px'), row_group_border_top_style=OptionsInfo(scss=True, category='row_group', type='value', value='solid'), row_group_border_top_width=OptionsInfo(scss=True, category='row_group', type='px', value='2px'), row_group_border_top_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_right_style=OptionsInfo(scss=True, category='row_group', type='value', value='none'), row_group_border_right_width=OptionsInfo(scss=True, category='row_group', type='px', value='1px'), row_group_border_right_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_bottom_style=OptionsInfo(scss=True, category='row_group', type='value', value='solid'), row_group_border_bottom_width=OptionsInfo(scss=True, category='row_group', type='px', value='2px'), row_group_border_bottom_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_left_style=OptionsInfo(scss=True, category='row_group', type='value', value='none'), row_group_border_left_width=OptionsInfo(scss=True, category='row_group', type='px', value='1px'), row_group_border_left_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_as_column=OptionsInfo(scss=False, category='row_group', type='boolean', value=False), table_body_hlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_hlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), table_body_hlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_vlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='none'), table_body_vlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), table_body_vlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_border_top_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_border_top_width=OptionsInfo(scss=True, category='table_body', type='px', value='2px'), table_body_border_top_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_border_bottom_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_border_bottom_width=OptionsInfo(scss=True, category='table_body', type='px', value='2px'), table_body_border_bottom_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), data_row_padding=OptionsInfo(scss=True, category='data_row', type='px', value='8px'), data_row_padding_horizontal=OptionsInfo(scss=True, category='data_row', type='px', value='5px'), stub_background_color=OptionsInfo(scss=True, category='stub', type='value', value=None), stub_font_size=OptionsInfo(scss=True, category='stub', type='px', value='100%'), stub_font_weight=OptionsInfo(scss=True, category='stub', type='value', value='initial'), stub_text_transform=OptionsInfo(scss=True, category='stub', type='value', value='inherit'), stub_border_style=OptionsInfo(scss=True, category='stub', type='value', value='solid'), stub_border_width=OptionsInfo(scss=True, category='stub', type='px', value='2px'), stub_border_color=OptionsInfo(scss=True, category='stub', type='value', value='#D3D3D3'), stub_row_group_background_color=OptionsInfo(scss=True, category='stub', type='value', value=None), stub_row_group_font_size=OptionsInfo(scss=True, category='stub', type='px', value='100%'), stub_row_group_font_weight=OptionsInfo(scss=True, category='stub', type='value', value='initial'), stub_row_group_text_transform=OptionsInfo(scss=True, category='stub', type='value', value='inherit'), stub_row_group_border_style=OptionsInfo(scss=True, category='stub', type='value', value='solid'), stub_row_group_border_width=OptionsInfo(scss=True, category='stub', type='px', value='2px'), stub_row_group_border_color=OptionsInfo(scss=True, category='stub', type='value', value='#D3D3D3'), source_notes_padding=OptionsInfo(scss=True, category='source_notes', type='px', value='4px'), source_notes_padding_horizontal=OptionsInfo(scss=True, category='source_notes', type='px', value='5px'), source_notes_background_color=OptionsInfo(scss=True, category='source_notes', type='value', value=None), source_notes_font_size=OptionsInfo(scss=True, category='source_notes', type='px', value='90%'), source_notes_border_bottom_style=OptionsInfo(scss=True, category='source_notes', type='value', value='none'), source_notes_border_bottom_width=OptionsInfo(scss=True, category='source_notes', type='px', value='2px'), source_notes_border_bottom_color=OptionsInfo(scss=True, category='source_notes', type='value', value='#D3D3D3'), source_notes_border_lr_style=OptionsInfo(scss=True, category='source_notes', type='value', value='none'), source_notes_border_lr_width=OptionsInfo(scss=True, category='source_notes', type='px', value='2px'), source_notes_border_lr_color=OptionsInfo(scss=True, category='source_notes', type='value', value='#D3D3D3'), source_notes_multiline=OptionsInfo(scss=False, category='source_notes', type='boolean', value=True), source_notes_sep=OptionsInfo(scss=False, category='source_notes', type='value', value=' '), row_striping_background_color=OptionsInfo(scss=True, category='row', type='value', value='rgba(128,128,128,0.05)'), row_striping_include_stub=OptionsInfo(scss=False, category='row', type='boolean', value=False), row_striping_include_table_body=OptionsInfo(scss=False, category='row', type='boolean', value=False), container_width=OptionsInfo(scss=False, category='container', type='px', value='auto'), container_height=OptionsInfo(scss=False, category='container', type='px', value='auto'), container_padding_x=OptionsInfo(scss=False, category='container', type='px', value='0px'), container_padding_y=OptionsInfo(scss=False, category='container', type='px', value='10px'), container_overflow_x=OptionsInfo(scss=False, category='container', type='overflow', value='auto'), container_overflow_y=OptionsInfo(scss=False, category='container', type='overflow', value='auto'), quarto_disable_processing=OptionsInfo(scss=False, category='quarto', type='logical', value=False), quarto_use_bootstrap=OptionsInfo(scss=False, category='quarto', type='logical', value=False)), _has_built=False)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regions = [\"MDC\",\"RUC\",\"MSPS\",\"RUN\",\"ULA\",\"UOri\",\"UOcc\",\"US\"]\n",
    "ponderaciones_producto_region = get_ponds_from_xlsx()\n",
    "GT(ponderaciones_producto_region[0:5,:]\n",
    "    ).fmt_number(columns=regions, decimals=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "266c0574",
   "metadata": {},
   "source": [
    "Dentro de cada agregado elemental se seleccionan uno o más artículos para representar todos los artículos pertenecientes a él. Por ejemplo, el agregado elemental compuesto por arroz en venta en supermercados del norte del país cubre todos los tipos de arroz, de los cuales se seleccionan como artículos representativos el arroz blanco precocido y el integral con más del 50% de granos partidos. Desde luego, en la práctica puede seleccionarse una mayor cantidad de artículos representativos. Finalmente, por cada uno puede seleccionarse una cantidad de productos específicos para la recopilación de precios, por ejemplo determinadas marcas de arroz precocido. Nuevamente, la cantidad de productos seleccionados para la muestra dependerá de la naturaleza del\n",
    "producto representativo.\n",
    "\n",
    "Un ejemplo para Honduras, correspondiente al arroz clasificado (CCIF= 01111201) en MDC es:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "74e4f9f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "region = \"MDC\"\n",
    "p_t, c_t, p_t_1, c_t_1, i_t, res_variedad, res_producto, res_categoria, res_subclase, res_grupo, res_division = obtener_indices(wd,region)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "608e38d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"pccqrdruvh\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n",
       "<style>\n",
       "#pccqrdruvh table {\n",
       "          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n",
       "          -webkit-font-smoothing: antialiased;\n",
       "          -moz-osx-font-smoothing: grayscale;\n",
       "        }\n",
       "\n",
       "#pccqrdruvh thead, tbody, tfoot, tr, td, th { border-style: none; }\n",
       " tr { background-color: transparent; }\n",
       "#pccqrdruvh p { margin: 0; padding: 0; }\n",
       " #pccqrdruvh .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n",
       " #pccqrdruvh .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n",
       " #pccqrdruvh .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n",
       " #pccqrdruvh .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n",
       " #pccqrdruvh .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n",
       " #pccqrdruvh .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n",
       " #pccqrdruvh .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n",
       " #pccqrdruvh .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n",
       " #pccqrdruvh .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n",
       " #pccqrdruvh .gt_column_spanner_outer:first-child { padding-left: 0; }\n",
       " #pccqrdruvh .gt_column_spanner_outer:last-child { padding-right: 0; }\n",
       " #pccqrdruvh .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n",
       " #pccqrdruvh .gt_spanner_row { border-bottom-style: hidden; }\n",
       " #pccqrdruvh .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n",
       " #pccqrdruvh .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n",
       " #pccqrdruvh .gt_from_md> :first-child { margin-top: 0; }\n",
       " #pccqrdruvh .gt_from_md> :last-child { margin-bottom: 0; }\n",
       " #pccqrdruvh .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n",
       " #pccqrdruvh .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n",
       " #pccqrdruvh .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n",
       " #pccqrdruvh .gt_row_group_first td { border-top-width: 2px; }\n",
       " #pccqrdruvh .gt_row_group_first th { border-top-width: 2px; }\n",
       " #pccqrdruvh .gt_striped { background-color: rgba(128,128,128,0.05); }\n",
       " #pccqrdruvh .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n",
       " #pccqrdruvh .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n",
       " #pccqrdruvh .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n",
       " #pccqrdruvh .gt_left { text-align: left; }\n",
       " #pccqrdruvh .gt_center { text-align: center; }\n",
       " #pccqrdruvh .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n",
       " #pccqrdruvh .gt_font_normal { font-weight: normal; }\n",
       " #pccqrdruvh .gt_font_bold { font-weight: bold; }\n",
       " #pccqrdruvh .gt_font_italic { font-style: italic; }\n",
       " #pccqrdruvh .gt_super { font-size: 65%; }\n",
       " #pccqrdruvh .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n",
       " #pccqrdruvh .gt_asterisk { font-size: 100%; vertical-align: 0; }\n",
       " \n",
       "</style>\n",
       "<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n",
       "<thead>\n",
       "\n",
       "<tr class=\"gt_col_headings\">\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".\">.</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Unidad de Medida\">Unidad de Medida</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Codigo\">Codigo</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"01111201.01\">01111201.01</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"01111201.02\">01111201.02</th>\n",
       "  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"01111201.03\">01111201.03</th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody class=\"gt_table_body\">\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">Yip's</td>\n",
       "    <td class=\"gt_row gt_left\">Precio</td>\n",
       "    <td class=\"gt_row gt_left\">Supermercado</td>\n",
       "    <td class=\"gt_row gt_right\">55.1096</td>\n",
       "    <td class=\"gt_row gt_right\">NaN</td>\n",
       "    <td class=\"gt_row gt_right\">20.0345</td>\n",
       "  </tr>\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">La Colonia # 1</td>\n",
       "    <td class=\"gt_row gt_left\">Precio</td>\n",
       "    <td class=\"gt_row gt_left\">Supermercado</td>\n",
       "    <td class=\"gt_row gt_right\">58.40515408</td>\n",
       "    <td class=\"gt_row gt_right\">NaN</td>\n",
       "    <td class=\"gt_row gt_right\">23.61065825</td>\n",
       "  </tr>\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">Los almendros</td>\n",
       "    <td class=\"gt_row gt_left\">Precio</td>\n",
       "    <td class=\"gt_row gt_left\">Mercadito</td>\n",
       "    <td class=\"gt_row gt_right\">NaN</td>\n",
       "    <td class=\"gt_row gt_right\">12.2705</td>\n",
       "    <td class=\"gt_row gt_right\">NaN</td>\n",
       "  </tr>\n",
       "  <tr>\n",
       "    <td class=\"gt_row gt_left\">5 estrellas</td>\n",
       "    <td class=\"gt_row gt_left\">Precio</td>\n",
       "    <td class=\"gt_row gt_left\">Mercadito</td>\n",
       "    <td class=\"gt_row gt_right\">NaN</td>\n",
       "    <td class=\"gt_row gt_right\">12.8205</td>\n",
       "    <td class=\"gt_row gt_right\">NaN</td>\n",
       "  </tr>\n",
       "</tbody>\n",
       "\n",
       "\n",
       "</table>\n",
       "\n",
       "</div>\n",
       "        "
      ],
      "text/plain": [
       "GT(_tbl_data=shape: (4, 6)\n",
       "┌────────────────┬──────────────────┬──────────────┬─────────────┬─────────────┬─────────────┐\n",
       "│ .              ┆ Unidad de Medida ┆ Codigo       ┆ 01111201.01 ┆ 01111201.02 ┆ 01111201.03 │\n",
       "│ ---            ┆ ---              ┆ ---          ┆ ---         ┆ ---         ┆ ---         │\n",
       "│ str            ┆ str              ┆ str          ┆ f64         ┆ f64         ┆ f64         │\n",
       "╞════════════════╪══════════════════╪══════════════╪═════════════╪═════════════╪═════════════╡\n",
       "│ Yip's          ┆ Precio           ┆ Supermercado ┆ 55.1096     ┆ NaN         ┆ 20.0345     │\n",
       "│ La Colonia # 1 ┆ Precio           ┆ Supermercado ┆ 58.405154   ┆ NaN         ┆ 23.610658   │\n",
       "│ Los almendros  ┆ Precio           ┆ Mercadito    ┆ NaN         ┆ 12.2705     ┆ NaN         │\n",
       "│ 5 estrellas    ┆ Precio           ┆ Mercadito    ┆ NaN         ┆ 12.8205     ┆ NaN         │\n",
       "└────────────────┴──────────────────┴──────────────┴─────────────┴─────────────┴─────────────┘, _body=<great_tables._gt_data.Body object at 0x0000013899118770>, _boxhead=Boxhead([ColInfo(var='.', type=<ColInfoTypeEnum.default: 1>, column_label='.', column_align='left', column_width=None), ColInfo(var='Unidad de Medida', type=<ColInfoTypeEnum.default: 1>, column_label='Unidad de Medida', column_align='left', column_width=None), ColInfo(var='Codigo', type=<ColInfoTypeEnum.default: 1>, column_label='Codigo', column_align='left', column_width=None), ColInfo(var='01111201.01', type=<ColInfoTypeEnum.default: 1>, column_label='01111201.01', column_align='right', column_width=None), ColInfo(var='01111201.02', type=<ColInfoTypeEnum.default: 1>, column_label='01111201.02', column_align='right', column_width=None), ColInfo(var='01111201.03', type=<ColInfoTypeEnum.default: 1>, column_label='01111201.03', column_align='right', column_width=None)]), _stub=<great_tables._gt_data.Stub object at 0x0000013898E5D1D0>, _spanners=Spanners([]), _heading=Heading(title=None, subtitle=None, preheader=None), _stubhead=None, _source_notes=[], _footnotes=[], _styles=[], _locale=<great_tables._gt_data.Locale object at 0x00000138990BDBD0>, _formats=[], _substitutions=[], _options=Options(table_id=OptionsInfo(scss=False, category='table', type='value', value=None), table_caption=OptionsInfo(scss=False, category='table', type='value', value=None), table_width=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_layout=OptionsInfo(scss=True, category='table', type='value', value='fixed'), table_margin_left=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_margin_right=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_background_color=OptionsInfo(scss=True, category='table', type='value', value='#FFFFFF'), table_additional_css=OptionsInfo(scss=False, category='table', type='values', value=[]), table_font_names=OptionsInfo(scss=False, category='table', type='values', value=['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Helvetica Neue', 'Fira Sans', 'Droid Sans', 'Arial', 'sans-serif']), table_font_size=OptionsInfo(scss=True, category='table', type='px', value='16px'), table_font_weight=OptionsInfo(scss=True, category='table', type='value', value='normal'), table_font_style=OptionsInfo(scss=True, category='table', type='value', value='normal'), table_font_color=OptionsInfo(scss=True, category='table', type='value', value='#333333'), table_font_color_light=OptionsInfo(scss=True, category='table', type='value', value='#FFFFFF'), table_border_top_include=OptionsInfo(scss=False, category='table', type='boolean', value=True), table_border_top_style=OptionsInfo(scss=True, category='table', type='value', value='solid'), table_border_top_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_top_color=OptionsInfo(scss=True, category='table', type='value', value='#A8A8A8'), table_border_right_style=OptionsInfo(scss=True, category='table', type='value', value='none'), table_border_right_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_right_color=OptionsInfo(scss=True, category='table', type='value', value='#D3D3D3'), table_border_bottom_include=OptionsInfo(scss=False, category='table', type='boolean', value=True), table_border_bottom_style=OptionsInfo(scss=True, category='table', type='value', value='solid'), table_border_bottom_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_bottom_color=OptionsInfo(scss=True, category='table', type='value', value='#A8A8A8'), table_border_left_style=OptionsInfo(scss=True, category='table', type='value', value='none'), table_border_left_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_left_color=OptionsInfo(scss=True, category='table', type='value', value='#D3D3D3'), heading_background_color=OptionsInfo(scss=True, category='heading', type='value', value=None), heading_align=OptionsInfo(scss=True, category='heading', type='value', value='center'), heading_title_font_size=OptionsInfo(scss=True, category='heading', type='px', value='125%'), heading_title_font_weight=OptionsInfo(scss=True, category='heading', type='value', value='initial'), heading_subtitle_font_size=OptionsInfo(scss=True, category='heading', type='px', value='85%'), heading_subtitle_font_weight=OptionsInfo(scss=True, category='heading', type='value', value='initial'), heading_padding=OptionsInfo(scss=True, category='heading', type='px', value='4px'), heading_padding_horizontal=OptionsInfo(scss=True, category='heading', type='px', value='5px'), heading_border_bottom_style=OptionsInfo(scss=True, category='heading', type='value', value='solid'), heading_border_bottom_width=OptionsInfo(scss=True, category='heading', type='px', value='2px'), heading_border_bottom_color=OptionsInfo(scss=True, category='heading', type='value', value='#D3D3D3'), heading_border_lr_style=OptionsInfo(scss=True, category='heading', type='value', value='none'), heading_border_lr_width=OptionsInfo(scss=True, category='heading', type='px', value='1px'), heading_border_lr_color=OptionsInfo(scss=True, category='heading', type='value', value='#D3D3D3'), column_labels_background_color=OptionsInfo(scss=True, category='column_labels', type='value', value=None), column_labels_font_size=OptionsInfo(scss=True, category='column_labels', type='px', value='100%'), column_labels_font_weight=OptionsInfo(scss=True, category='column_labels', type='value', value='normal'), column_labels_text_transform=OptionsInfo(scss=True, category='column_labels', type='value', value='inherit'), column_labels_padding=OptionsInfo(scss=True, category='column_labels', type='px', value='5px'), column_labels_padding_horizontal=OptionsInfo(scss=True, category='column_labels', type='px', value='5px'), column_labels_vlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='none'), column_labels_vlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), column_labels_vlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), column_labels_border_top_style=OptionsInfo(scss=True, category='column_labels', type='value', value='solid'), column_labels_border_top_width=OptionsInfo(scss=True, category='column_labels', type='px', value='2px'), column_labels_border_top_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_border_bottom_style=OptionsInfo(scss=True, category='column_labels', type='value', value='solid'), column_labels_border_bottom_width=OptionsInfo(scss=True, category='column_labels', type='px', value='2px'), column_labels_border_bottom_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_border_lr_style=OptionsInfo(scss=True, category='column_labels', type='value', value='none'), column_labels_border_lr_width=OptionsInfo(scss=True, category='column_labels', type='px', value='1px'), column_labels_border_lr_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_hidden=OptionsInfo(scss=False, category='column_labels', type='boolean', value=False), row_group_background_color=OptionsInfo(scss=True, category='row_group', type='value', value=None), row_group_font_size=OptionsInfo(scss=True, category='row_group', type='px', value='100%'), row_group_font_weight=OptionsInfo(scss=True, category='row_group', type='value', value='initial'), row_group_text_transform=OptionsInfo(scss=True, category='row_group', type='value', value='inherit'), row_group_padding=OptionsInfo(scss=True, category='row_group', type='px', value='8px'), row_group_padding_horizontal=OptionsInfo(scss=True, category='row_group', type='px', value='5px'), row_group_border_top_style=OptionsInfo(scss=True, category='row_group', type='value', value='solid'), row_group_border_top_width=OptionsInfo(scss=True, category='row_group', type='px', value='2px'), row_group_border_top_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_right_style=OptionsInfo(scss=True, category='row_group', type='value', value='none'), row_group_border_right_width=OptionsInfo(scss=True, category='row_group', type='px', value='1px'), row_group_border_right_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_bottom_style=OptionsInfo(scss=True, category='row_group', type='value', value='solid'), row_group_border_bottom_width=OptionsInfo(scss=True, category='row_group', type='px', value='2px'), row_group_border_bottom_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_left_style=OptionsInfo(scss=True, category='row_group', type='value', value='none'), row_group_border_left_width=OptionsInfo(scss=True, category='row_group', type='px', value='1px'), row_group_border_left_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_as_column=OptionsInfo(scss=False, category='row_group', type='boolean', value=False), table_body_hlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_hlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), table_body_hlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_vlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='none'), table_body_vlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), table_body_vlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_border_top_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_border_top_width=OptionsInfo(scss=True, category='table_body', type='px', value='2px'), table_body_border_top_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_border_bottom_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_border_bottom_width=OptionsInfo(scss=True, category='table_body', type='px', value='2px'), table_body_border_bottom_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), data_row_padding=OptionsInfo(scss=True, category='data_row', type='px', value='8px'), data_row_padding_horizontal=OptionsInfo(scss=True, category='data_row', type='px', value='5px'), stub_background_color=OptionsInfo(scss=True, category='stub', type='value', value=None), stub_font_size=OptionsInfo(scss=True, category='stub', type='px', value='100%'), stub_font_weight=OptionsInfo(scss=True, category='stub', type='value', value='initial'), stub_text_transform=OptionsInfo(scss=True, category='stub', type='value', value='inherit'), stub_border_style=OptionsInfo(scss=True, category='stub', type='value', value='solid'), stub_border_width=OptionsInfo(scss=True, category='stub', type='px', value='2px'), stub_border_color=OptionsInfo(scss=True, category='stub', type='value', value='#D3D3D3'), stub_row_group_background_color=OptionsInfo(scss=True, category='stub', type='value', value=None), stub_row_group_font_size=OptionsInfo(scss=True, category='stub', type='px', value='100%'), stub_row_group_font_weight=OptionsInfo(scss=True, category='stub', type='value', value='initial'), stub_row_group_text_transform=OptionsInfo(scss=True, category='stub', type='value', value='inherit'), stub_row_group_border_style=OptionsInfo(scss=True, category='stub', type='value', value='solid'), stub_row_group_border_width=OptionsInfo(scss=True, category='stub', type='px', value='2px'), stub_row_group_border_color=OptionsInfo(scss=True, category='stub', type='value', value='#D3D3D3'), source_notes_padding=OptionsInfo(scss=True, category='source_notes', type='px', value='4px'), source_notes_padding_horizontal=OptionsInfo(scss=True, category='source_notes', type='px', value='5px'), source_notes_background_color=OptionsInfo(scss=True, category='source_notes', type='value', value=None), source_notes_font_size=OptionsInfo(scss=True, category='source_notes', type='px', value='90%'), source_notes_border_bottom_style=OptionsInfo(scss=True, category='source_notes', type='value', value='none'), source_notes_border_bottom_width=OptionsInfo(scss=True, category='source_notes', type='px', value='2px'), source_notes_border_bottom_color=OptionsInfo(scss=True, category='source_notes', type='value', value='#D3D3D3'), source_notes_border_lr_style=OptionsInfo(scss=True, category='source_notes', type='value', value='none'), source_notes_border_lr_width=OptionsInfo(scss=True, category='source_notes', type='px', value='2px'), source_notes_border_lr_color=OptionsInfo(scss=True, category='source_notes', type='value', value='#D3D3D3'), source_notes_multiline=OptionsInfo(scss=False, category='source_notes', type='boolean', value=True), source_notes_sep=OptionsInfo(scss=False, category='source_notes', type='value', value=' '), row_striping_background_color=OptionsInfo(scss=True, category='row', type='value', value='rgba(128,128,128,0.05)'), row_striping_include_stub=OptionsInfo(scss=False, category='row', type='boolean', value=False), row_striping_include_table_body=OptionsInfo(scss=False, category='row', type='boolean', value=False), container_width=OptionsInfo(scss=False, category='container', type='px', value='auto'), container_height=OptionsInfo(scss=False, category='container', type='px', value='auto'), container_padding_x=OptionsInfo(scss=False, category='container', type='px', value='0px'), container_padding_y=OptionsInfo(scss=False, category='container', type='px', value='10px'), container_overflow_x=OptionsInfo(scss=False, category='container', type='overflow', value='auto'), container_overflow_y=OptionsInfo(scss=False, category='container', type='overflow', value='auto'), quarto_disable_processing=OptionsInfo(scss=False, category='quarto', type='logical', value=False), quarto_use_bootstrap=OptionsInfo(scss=False, category='quarto', type='logical', value=False)), _has_built=False)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GT(p_t[:,0:6].filter(\n",
    "   ~pl.all_horizontal(pl.col(pl.Float64).is_nan())\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd523c20",
   "metadata": {},
   "source": [
    "Puede observarse que este producto tiene tres subclasificaciones o variedades:\n",
    "\n",
    "- 01111201.01\tArroz clasificado;\n",
    "- 01111201.02\tArroz corriente; y\n",
    "- 01111201.03\tArroz precocido.\n",
    "\n",
    "Además, se consultan precios en dos tipos de establecimiento:\n",
    "\n",
    "- Supermercado (Yip's y La Colonia # 1); y\n",
    "- Mercadito (Los almendros y 5 estrellas)\n",
    "\n",
    "A continuación se analizan los métodos utilizados para calcular índices elementales a partir de observaciones sobre precios individuales. Todos los índices de nivel superior por encima del nivel agregado elemental se obtienen a partir de los índices de precios elementales utilizando como ponderaciones los agregados elementales de gastos. \n",
    "\n",
    "La estructura de agregación es consistente, de manera que la ponderación de cada nivel por encima del agregado elemental siempre es igual a la suma de sus componentes. El índice de precios en cada nivel superior de agregación se calcula sobre la base de las ponderaciones y los índices de precios de sus componentes, es decir, los índices de nivel inferior o elementales.\n",
    "\n",
    "Los índices de precios elementales individuales pueden no ser lo suficientemente confiables para publicarlos por separado, aunque sirven para construir todos los índices de nivel superior.\n",
    "\n",
    "En la mayoría de los casos, los índices de precios de los agregados elementales se calculan sin utilizar ponderaciones de gasto explícitas. Sin embargo, en la medida de lo posible, deberían utilizarse ponderaciones que reflejen la importancia relativa de los artículos incluidos en la muestra, aun si las ponderaciones son solo aproximadas. \n",
    "\n",
    "A menudo, el agregado elemental es sencillamente el nivel más bajo respecto del cual se dispone de información confiable. En este caso, el índice elemental debe calcularse como el promedio no ponderado de los precios que lo componen. \n",
    "\n",
    "## Construcción de índices de precios elementales\n",
    "\n",
    "Un índice de precios elemental es un índice de precios de un agregado elemental. En el ejemplo se supone que para el agregado elemental se recopilan los precios de cuatro artículos. La calidad de cada artículo permanece constante a lo largo del tiempo a efectos de asegurar que las variaciones de un mes a otro representen una comparación entre semejantes. \n",
    "\n",
    "Inicialmente se supone que los precios de los cuatro artículos se recopilan todos los meses, con lo cual se dispone de un conjunto completo de precios. No desaparece ningún artículo ni falta ningún precio, y tampoco hay artículos de reemplazo. Se trata de un supuesto bastante fuerte, pues muchos de los problemas que surgen en la práctica se deben a rupturas en la continuidad de la serie de precios de los artículos individuales, por cualquier motivo. \n",
    "\n",
    "Tres fórmulas muy utilizadas por las oficinas de estadística para calcular los índices de precios elementales. Sin embargo, cabe tener en cuenta que no constituyen las únicas posibilidades y más adelante se consideran algunas fórmulas alternativas. \n",
    "\n",
    "# Índices \n",
    "\n",
    "# Lowe:\n",
    "\n",
    "El período cuyas cantidades efectivamente se utilizan en el IPC se conoce como *período de referencia de las ponderaciones*, y se denotará como período $b$. El período 0 es el período de referencia de los precios.\n",
    "\n",
    "Sea $n$ la cantidad de productos en una canasta con precios $p_i$ y cantidades $q_i$, y sean 0 y $t$ los dos períodos que se comparan. \n",
    "\n",
    "El índice de Lowe $P_{Lo}$ para el producto $i$ de la región $r$ se define de la siguiente manera:\n",
    "\n",
    "$P_{Lo}=\\frac{\\sum_{i=1}^n p_i^t q_i}{\\sum_{i=1}^n p_0^t q_i}$\n",
    "\n",
    "El índice de Lowe que utiliza las cantidades del período $b$ puede expresarse de la siguiente forma:\n",
    "\n",
    "$P_{Lo}=\\frac{\\sum_{i=1}^n p_i^t q_i^b}{\\sum_{i=1}^n p_i^0 q_i^b}$\n",
    "\n",
    "$P_{Lo}=\\sum_{i=1}^n \\frac{p_i^t}{p_i^0} s_i^{0b}$\n",
    "\n",
    "donde\n",
    "\n",
    "$s_i^{0b}=\\frac{p_i^0q_i^b}{\\sum_{i=1}^n p_i^0q_i^b}$\n",
    "\n",
    "2. Índice de Precios por Establecimiento (e) y Variedad (V)\n",
    "\n",
    "$i_{ev}^r = \\frac{\\frac{p_{ev,t}^r}{c_{ev,t}^r}}{\\frac{p_{ev,t-1}^r}{c_{ev,t-1}^r}}$\n",
    "\n",
    "3. Índice de Precios por Variedad: Media Geométrica\n",
    "\n",
    "$i_V^r = \\sqrt[n]{{i_{ev_1}^r,i_{ev_2}^r,...,i_{ev_n}^r}} \\text{ for v in } V^r$\n",
    "\n",
    "$i_V^r = \\exp (\\frac{{\\ln i_{ev_1}^r + \\ln i_{ev_2}^r +...+\\ln i_{ev_n}^r}}{n}) \\text{ for v in } V^r$\n",
    "\n",
    "4. Índice de Precios por Producto (X): Media Geométrica\n",
    "\n",
    "$i_X^r = \\sqrt[n]{{i_{V_1}^r,i_{V_2}^r,...,i_{V_n}^r}} \\text{ for V in } X^r$\n",
    "\n",
    "$i_X^r = \\exp (\\frac{{\\ln i_{V_1}^r + \\ln i_{V_2}^r +...+\\ln i_{V_n}^r}}{n}) \\text{ for V in } X^r$\n",
    "\n",
    "$Indice\\_Pond^r$ = $i_X^r * w_X^r$\n",
    "\n",
    "$IPC^r$ = $\\sum{Indice\\_Pond^r}$\n",
    "\n",
    "$w_A^r = \\frac{w_X^r}{\\sum w_X^r} \\text{ for X in } A^r$\n",
    "\n",
    "$i_A^r = \\sum i_X^r * \\frac{w_X^r}{w_A^r} \\text{ for X in } A^r$"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "C:\\Users\\ec109004\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
